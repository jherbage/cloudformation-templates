---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SubnetAZ1:
    Description: Availability Zone for Subnet 1
    Type: AWS::EC2::AvailabilityZone::Name
  SubnetAZ2:
    Description: Availability Zone for Subnet 1
    Type: AWS::EC2::AvailabilityZone::Name
  SubnetAZ3:
    Description: Availability Zone for Subnet 3
    Type: AWS::EC2::AvailabilityZone::Name	
  VPCCIDR:
    Description: CIDR for VPC
    Type: String
  SubnetCIDR1:
    Description: CIDR for Subnet 1
    Type: String
  SubnetCIDR2:
    Description: CIDR for Subnet 1
    Type: String
  SubnetCIDR3:
    Description: CIDR for Subnet 3
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref SubnetAZ1
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCIDR1
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref SubnetAZ2
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCIDR2
      MapPublicIpOnLaunch: true
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref SubnetAZ3
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCIDR3
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable  
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH/HTTP traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2380'
          ToPort: '2380'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2379'
          ToPort: '2379'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '6443'
          ToPort: '6443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
Outputs:
  SecurityGroupOut:
    Description: Internet Group created
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
  VPCOut:
    Description: VPC created
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCGroup"
  SubnetAOut:
    Description: SubnetA created
    Value: !Ref SubnetA
    Export:
      Name: !Sub "${AWS::StackName}-SubnetA"
  SubnetBOut:
    Description: SubnetB created
    Value: !Ref SubnetB
    Export:
      Name: !Sub "${AWS::StackName}-SubnetB"
  SubnetCOut:
    Description: SubnetC created
    Value: !Ref SubnetC
    Export:
      Name: !Sub "${AWS::StackName}-SubnetC"