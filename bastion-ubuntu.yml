---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BastionAMIImage:
    Description: AMI to use for bastion host
    Type: AWS::EC2::Image::Id
    Default: ami-061a2d878e5754b62
  EC2KeyPair:
    Description: EC2 Keypair
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-eu-keys
  SecurityGroup:
    Description: EC2 Security Group
    Type: AWS::EC2::SecurityGroup::Id
  BastionSubnet:
    Description: Bastion Subnet
    Type: AWS::EC2::Subnet::Id
  InstanceProfile:
    Description: IAM Profile
    Type: String
  CertsS3Bucket:
    Description: Certs S3 Bucket
    Type: String
  LbDNSAddr:
    Description: Address for the Load Balancer
    Type: String
  Controller1Addr:
    Description: Private IP Address for controller1
    Type: String
  Controller2Addr:
    Description: Private IP Address for controller2
    Type: String
  Controller3Addr:
    Description: Private IP Address for controller3
    Type: String
  ELBPrivateIPRange:
    Description: The range of IP addresses the ELB could use
    Type: String
Resources:
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionAMIImage
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          GroupSet: 
            - !Ref SecurityGroup
          SubnetId: !Ref BastionSubnet
      UserData: 
        Fn::Base64:
          Fn::Join:
            - ""
            -
              - "#!/bin/bash -v\n"
              - "# Install AWS cfn tools for ubuntu\n"
              - "apt-get update\n"
              - "apt-get -y install python-setuptools\n"
              - "mkdir aws-cfn-bootstrap-latest\n"
              - "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n"
              - "easy_install aws-cfn-bootstrap-latest\n"
              - "# Function to return error code to the wait handle\n"
              - "function handle_error\n"
              - "{\n"
              - !Sub " /usr/local/bin/cfn-signal -e 1 --stack ${AWS::StackName} -r 'Failed to run cfn-init' --resource BastionHost --region ${AWS::Region}\n"
              - " exit 1\n"
              - "}\n"
              - !Sub "/usr/local/bin/cfn-init -s ${AWS::StackName} -r BastionHost --region ${AWS::Region} || handle_error 'Failed to run cfn-init'\n"
              - "# Return success\n"
              - !Sub "/usr/local/bin/cfn-signal -e 0 --stack ${AWS::StackName} -r 'Stack complete' --resource BastionHost --region ${AWS::Region}\n"
    CreationPolicy:
      ResourceSignal:
        Timeout: "PT5M"
    Metadata:
      AWS::CloudFormation::Init: 
        config: 
          groups: 
            users: {}
          users: 
            user:
              groups:
                - 'users'
              uid: '501'
              homeDir: "/home/user"
          packages:
            apt:
              awscli: []
          files: 
            "/usr/local/bin/cfssl":
              source: "https://pkg.cfssl.org/R1.2/cfssl_linux-amd64"
              group: root
              owner: user
              mode: "000550"
            "/usr/local/bin/cfssljson":
              source: "https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64"
              group: root
              owner: user
              mode: "000550"
            "/usr/local/bin/kubectl":
              source: "https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kubectl"
              group: root
              owner: user
              mode: "000550"
            "/certs/ca-config.json":
              mode: "000550"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '  "signing": {'
                    - '    "default": {'
                    - '      "expiry": "8760h"'
                    - '    },'
                    - '   "profiles": {'
                    - '      "kubernetes": {'
                    - '        "usages": ["signing", "key encipherment", "server auth", "client auth"],'
                    - '        "expiry": "8760h"'
                    - '      }'
                    - '    }'
                    - '  }'
                    - '}'
            "/certs/ca-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "Kubernetes",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "Kubernetes",'
                    - '      "OU": "CA",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/admin-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "admin",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "system:masters",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/kube-controller-manager-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "system:kube-controller-manager",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "system:kube-controller-manager",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/kube-controller-manager-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "system:kube-controller-manager",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "system:kube-controller-manager",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/kube-proxy-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "system:kube-proxy",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "system:node-proxier",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/kube-scheduler-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "system:kube-scheduler",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "system:kube-scheduler",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/service-account-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "service-accounts",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "Kubernetes",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
            "/certs/kubernetes-csr.json":
              mode: "000755"
              group: root
              owner: root			  
              content:
                Fn::Join:
                  - "\n"
                  -
                    - '{'
                    - '"CN": "kubernetes",'
                    - '  "key": {'
                    - '    "algo": "rsa",'
                    - '    "size": 2048'
                    - '  },'
                    - '  "names": ['
                    - '    {'
                    - '      "C": "US",'
                    - '      "L": "Portland",'
                    - '      "O": "Kubernetes",'
                    - '      "OU": "Kubernetes The Hard Way",'
                    - '      "ST": "Oregon"'
                    - '    }'
                    - '  ]'
                    - '}'
          commands:
            1testcfssl: 
              command: "cfssl version"
            2testkubectl: 
              command: "kubectl version --client"
            3generateCA: 
              cwd: "/certs"
              command: 'cfssl gencert -initca ca-csr.json | cfssljson -bare ca'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'ca-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            4generateAdminCert: 
              cwd: "/certs"
              command: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'admin-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            5generateControllerCert: 
              cwd: "/certs"
              command: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'kube-controller-manager-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            6generateProxyCert: 
              cwd: "/certs"
              command: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'kube-proxy-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            7generateSchedulerCert: 
              cwd: "/certs"
              command: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'kube-scheduler-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            8generateServiceAccountCert: 
              cwd: "/certs"
              command: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'service-account-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            9generateKubeAPICert: 
              cwd: "/certs"
              command: 
                Fn::Join:
                  - ""
                  -
                    - 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname='
                    - !Ref ELBPrivateIPRange
                    - ',10.32.0.1,localhost,kubernetes.default,127.0.0.1,'
                    - !Ref LbDNSAddr
                    - ','
                    - !Ref Controller1Addr
                    - ','
                    - !Ref Controller2Addr
                    - ','
                    - !Ref Controller3Addr
                    - ' -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes'
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'kubernetes-key.pem' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            agenerateEncryptionKey: 
              cwd: "/certs"
              command: 
                Fn::Join:
                  - "\n"
                  -
                    - "ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)"
                    - "cat > encryption-config.yaml << EOF"
                    - "kind: EncryptionConfig"
                    - "apiVersion: v1"
                    - "resources:"
                    - "  - resources:"
                    - "      - secrets"
                    - "    providers:"
                    - "      - aescbc:"
                    - "          keys:"
                    - "            - name: key1"
                    - "              secret: ${ENCRYPTION_KEY}"
                    - "      - identity: {}"
                    - "EOF"
              test: 
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -v\n"
                    - "if [ ! -e 'encryption-config.yaml' ]; then\n"
                    - "  exit 0\n"
                    - "else\n"
                    - "  exit 1\n"
                    - "fi\n"
            bmakeKubectlClient: 
              cwd: "/certs"
              command: 
                !Sub |
                  kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://${LbDNSAddr}:6443
                  kubectl config set-credentials admin --client-certificate=/certs/admin.pem --client-key=/certs/admin-key.pem
                  kubectl config set-context kubernetes-the-hard-way --cluster=kubernetes-the-hard-way --user=admin
                  kubectl config use-context kubernetes-the-hard-way
            zcopyCerts:
              cwd: "/certs"
              command: 
                Fn::Join:
                  - ""
                  -
                    - "aws s3 cp . s3://"
                    - !Ref CertsS3Bucket
                    - " --region "
                    - !Sub "${AWS::Region} --recursive --exclude='*' --include='*.pem'"
            zcopyEncryptKey:
              cwd: "/certs"
              command: 
                Fn::Join:
                  - ""
                  -
                    - "aws s3 cp . s3://"
                    - !Ref CertsS3Bucket
                    - " --region "
                    - !Sub "${AWS::Region} --recursive --exclude='*' --include='encryption-config.yaml'"

Outputs:
  BastionHostOut:
    Description: BastionHost created
    Value: !Ref BastionHost
    Export:
      Name: !Sub "${AWS::StackName}-BastionHost"