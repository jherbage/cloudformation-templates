---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Repo_Url:
    Description: Github Reository Url top level
    Type: String
  S3Bucket:
    Description: Temporary S3 bucket to store the repository contents
    Type: AWS::S3::Bucket
  LambdaExecutionRole:
    Description: IAM role for the lambda function eg to access S3 bucket
    Type: AWS::IAM::Role
Resources:
  CreateZipFiles:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt S3UploadObject.Arn
      Region: !Ref "AWS::Region"
      temp_bucket: !GetAtt S3Bucket
      repo_url: !GetAtt Repo_Url	  
  TempS3Bucket:
    Type: AWS::S3::Bucket
  S3UploadObject:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uploads contents of github repo to S3.
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import urllib2
          import os
          import base64
          import shutil
          from urllib2 import urlopen, URLError, HTTPError
          import boto3
          import zipfile
          import requests
          def upload_directory(src_dir, bucket_name, dst_dir):
            s3_resource = boto3.resource('s3', region_name=event['ResourceProperties']['Region'])
            bucket = s3_resource.Bucket(bucket_name)
            bucket.objects.all().delete()
            if not os.path.isdir(src_dir):
              raise ValueError('src_dir %r not found.' % src_dir)
              all_files = []
            for root, dirs, files in os.walk(src_dir):
              all_files += [os.path.join(root, f) for f in files]
            for filename in all_files:
              s3_resource.Object(bucket_name, os.path.join(dst_dir, os.path.relpath(filename, src_dir)))\
              .put(Body=open(filename, 'rb'))
          def handler(event, context):
            os.chdir('/tmp')
            if os.path.exists('/tmp/repo') and os.path.isdir('/tmp/repo'):
              shutil.rmtree('/tmp/repo')
            filename = os.path.join(os.getcwd(), 'repos.zip')
            url = event['repo_url']+"/zipball/master"
            r = requests.get(url)
            with open(filename, 'wb') as f:
              f.write(r.content)
            # unzip
            zip_ref = zipfile.ZipFile("repos.zip", 'r')
            zip_ref.extractall('/tmp/repo')
            zip_ref.close()
            # should only be one directory under repo
            files=os.listdir('/tmp/repo')
            repo=None
            for file in files:
              if file != '.' and file != '..':
                repo=file
            upload_directory("/tmp/repo/"+repo, event['temp_bucket'], '')
      Timeout: 300
      Runtime: python2.7